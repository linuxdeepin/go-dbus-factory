// Code generated by "./generator ./system/com.deepin.api.soundthemeplayer"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package soundthemeplayer

import "fmt"
import "github.com/godbus/dbus"

import "github.com/linuxdeepin/go-lib/dbusutil/proxy"
import "github.com/stretchr/testify/mock"

type MockSoundThemePlayer struct {
	MockInterfaceSoundThemePlayer // interface com.deepin.api.SoundThemePlayer
	proxy.MockObject
}

type MockInterfaceSoundThemePlayer struct {
	mock.Mock
}

// method EnableSound

func (v *MockInterfaceSoundThemePlayer) GoEnableSound(flags dbus.Flags, ch chan *dbus.Call, name string, enabled bool) *dbus.Call {
	mockArgs := v.Called(flags, ch, name, enabled)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) EnableSound(flags dbus.Flags, name string, enabled bool) error {
	mockArgs := v.Called(flags, name, enabled)

	return mockArgs.Error(0)
}

// method EnableSoundDesktopLogin

func (v *MockInterfaceSoundThemePlayer) GoEnableSoundDesktopLogin(flags dbus.Flags, ch chan *dbus.Call, enabled bool) *dbus.Call {
	mockArgs := v.Called(flags, ch, enabled)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) EnableSoundDesktopLogin(flags dbus.Flags, enabled bool) error {
	mockArgs := v.Called(flags, enabled)

	return mockArgs.Error(0)
}

// method Play

func (v *MockInterfaceSoundThemePlayer) GoPlay(flags dbus.Flags, ch chan *dbus.Call, theme string, event string, device string) *dbus.Call {
	mockArgs := v.Called(flags, ch, theme, event, device)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) Play(flags dbus.Flags, theme string, event string, device string) error {
	mockArgs := v.Called(flags, theme, event, device)

	return mockArgs.Error(0)
}

// method PlaySoundDesktopLogin

func (v *MockInterfaceSoundThemePlayer) GoPlaySoundDesktopLogin(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) PlaySoundDesktopLogin(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}

// method PrepareShutdownSound

func (v *MockInterfaceSoundThemePlayer) GoPrepareShutdownSound(flags dbus.Flags, ch chan *dbus.Call, uid int32) *dbus.Call {
	mockArgs := v.Called(flags, ch, uid)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) PrepareShutdownSound(flags dbus.Flags, uid int32) error {
	mockArgs := v.Called(flags, uid)

	return mockArgs.Error(0)
}

// method SaveAudioState

func (v *MockInterfaceSoundThemePlayer) GoSaveAudioState(flags dbus.Flags, ch chan *dbus.Call, activePlayback map[string]dbus.Variant) *dbus.Call {
	mockArgs := v.Called(flags, ch, activePlayback)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) SaveAudioState(flags dbus.Flags, activePlayback map[string]dbus.Variant) error {
	mockArgs := v.Called(flags, activePlayback)

	return mockArgs.Error(0)
}

// method SetSoundTheme

func (v *MockInterfaceSoundThemePlayer) GoSetSoundTheme(flags dbus.Flags, ch chan *dbus.Call, theme string) *dbus.Call {
	mockArgs := v.Called(flags, ch, theme)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceSoundThemePlayer) SetSoundTheme(flags dbus.Flags, theme string) error {
	mockArgs := v.Called(flags, theme)

	return mockArgs.Error(0)
}
