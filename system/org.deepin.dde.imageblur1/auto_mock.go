// Code generated by "./generator ./system/org.deepin.dde.imageblur1"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package imageblur1

import (
	"fmt"

	"github.com/godbus/dbus/v5"
	"github.com/linuxdeepin/go-lib/dbusutil"
	"github.com/linuxdeepin/go-lib/dbusutil/proxy"
	"github.com/stretchr/testify/mock"
)

type MockImageBlur struct {
	MockInterfaceImageBlur // interface org.deepin.dde.ImageBlur1
	proxy.MockObject
}

type MockInterfaceImageBlur struct {
	mock.Mock
}

// method Delete

func (v *MockInterfaceImageBlur) GoDelete(flags dbus.Flags, ch chan *dbus.Call, file string) *dbus.Call {
	mockArgs := v.Called(flags, ch, file)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceImageBlur) Delete(flags dbus.Flags, file string) error {
	mockArgs := v.Called(flags, file)

	return mockArgs.Error(0)
}

// method Get

func (v *MockInterfaceImageBlur) GoGet(flags dbus.Flags, ch chan *dbus.Call, source string) *dbus.Call {
	mockArgs := v.Called(flags, ch, source)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceImageBlur) Get(flags dbus.Flags, source string) (string, error) {
	mockArgs := v.Called(flags, source)

	return mockArgs.String(0), mockArgs.Error(1)
}

// signal BlurDone

func (v *MockInterfaceImageBlur) ConnectBlurDone(cb func(imgFile string, imgBlurFile string, ok bool)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}
