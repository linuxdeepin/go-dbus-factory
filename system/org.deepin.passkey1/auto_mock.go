// Code generated by "./generator system/org.deepin.passkey1"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package passkey1

import (
	"fmt"

	"github.com/godbus/dbus/v5"
	"github.com/linuxdeepin/go-lib/dbusutil"
	"github.com/linuxdeepin/go-lib/dbusutil/proxy"
	"github.com/stretchr/testify/mock"
)

type MockPasskey struct {
	MockInterfacePasskey // interface org.deepin.Passkey1
	proxy.MockObject
}

type MockInterfacePasskey struct {
	mock.Mock
}

func (v *MockInterfacePasskey) SetInterfaceName_(string) {
}

// method Claim

func (v *MockInterfacePasskey) GoClaim(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) Claim(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}

// method UnClaim

func (v *MockInterfacePasskey) GoUnClaim(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) UnClaim(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}

// method GetPinStatus

func (v *MockInterfacePasskey) GoGetPinStatus(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) GetPinStatus(flags dbus.Flags) (int32, int32, error) {
	mockArgs := v.Called(flags)

	ret0, ok := mockArgs.Get(0).(int32)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	ret1, ok := mockArgs.Get(1).(int32)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 1, mockArgs.Get(1)))
	}

	return ret0, ret1, mockArgs.Error(2)
}

// method SetPin

func (v *MockInterfacePasskey) GoSetPin(flags dbus.Flags, ch chan *dbus.Call, old string, new string) *dbus.Call {
	mockArgs := v.Called(flags, ch, old, new)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) SetPin(flags dbus.Flags, old string, new string) error {
	mockArgs := v.Called(flags, old, new)

	return mockArgs.Error(0)
}

// method Reset

func (v *MockInterfacePasskey) GoReset(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) Reset(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}

// method MakeCredential

func (v *MockInterfacePasskey) GoMakeCredential(flags dbus.Flags, ch chan *dbus.Call, user string, credName string, pin string) *dbus.Call {
	mockArgs := v.Called(flags, ch, user, credName, pin)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) MakeCredential(flags dbus.Flags, user string, credName string, pin string) error {
	mockArgs := v.Called(flags, user, credName, pin)

	return mockArgs.Error(0)
}

// method GetAssertion

func (v *MockInterfacePasskey) GoGetAssertion(flags dbus.Flags, ch chan *dbus.Call, user string, credName string, pin string) *dbus.Call {
	mockArgs := v.Called(flags, ch, user, credName, pin)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) GetAssertion(flags dbus.Flags, user string, credName string, pin string) error {
	mockArgs := v.Called(flags, user, credName, pin)

	return mockArgs.Error(0)
}

// method GetValidCredCount

func (v *MockInterfacePasskey) GoGetValidCredCount(flags dbus.Flags, ch chan *dbus.Call, user string) *dbus.Call {
	mockArgs := v.Called(flags, ch, user)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) GetValidCredCount(flags dbus.Flags, user string) (int32, error) {
	mockArgs := v.Called(flags, user)

	ret0, ok := mockArgs.Get(0).(int32)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method GetCreds

func (v *MockInterfacePasskey) GoGetCreds(flags dbus.Flags, ch chan *dbus.Call, user string) *dbus.Call {
	mockArgs := v.Called(flags, ch, user)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) GetCreds(flags dbus.Flags, user string) ([]string, error) {
	mockArgs := v.Called(flags, user)

	ret0, ok := mockArgs.Get(0).([]string)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method GetDeviceCount

func (v *MockInterfacePasskey) GoGetDeviceCount(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) GetDeviceCount(flags dbus.Flags) (int32, error) {
	mockArgs := v.Called(flags)

	ret0, ok := mockArgs.Get(0).(int32)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method DeviceDetect

func (v *MockInterfacePasskey) GoDeviceDetect(flags dbus.Flags, ch chan *dbus.Call, timeout int32) *dbus.Call {
	mockArgs := v.Called(flags, ch, timeout)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfacePasskey) DeviceDetect(flags dbus.Flags, timeout int32) error {
	mockArgs := v.Called(flags, timeout)

	return mockArgs.Error(0)
}

// signal ResetStatus

func (v *MockInterfacePasskey) ConnectResetStatus(cb func(finish int32, result int32)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// signal MakeCredStatus

func (v *MockInterfacePasskey) ConnectMakeCredStatus(cb func(user string, finish int32, result int32)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// signal GetAssertStatus

func (v *MockInterfacePasskey) ConnectGetAssertStatus(cb func(user string, finish int32, result int32)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// signal DeviceDetectStatus

func (v *MockInterfacePasskey) ConnectDeviceDetectStatus(cb func(finish int32, result int32)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}
