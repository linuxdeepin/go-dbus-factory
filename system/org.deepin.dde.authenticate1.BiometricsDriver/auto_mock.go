// Code generated by "./generator ./system/org.deepin.dde.authenticate1.BiometricsDriver"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package BiometricsDriver

import (
	"fmt"

	"github.com/godbus/dbus/v5"
	"github.com/linuxdeepin/go-lib/dbusutil"
	"github.com/linuxdeepin/go-lib/dbusutil/proxy"
	"github.com/stretchr/testify/mock"
)

type MockBiometricsDriver struct {
	MockInterfaceBiometricsDriver // interface org.deepin.dde.Authenticate1.BiometricsDriver
	proxy.MockObject
}

type MockInterfaceBiometricsDriver struct {
	mock.Mock
}

func (v *MockInterfaceBiometricsDriver) SetInterfaceName_(string) {
}

// method Delete

func (v *MockInterfaceBiometricsDriver) GoDelete(flags dbus.Flags, ch chan *dbus.Call, chara string) *dbus.Call {
	mockArgs := v.Called(flags, ch, chara)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBiometricsDriver) Delete(flags dbus.Flags, chara string) error {
	mockArgs := v.Called(flags, chara)

	return mockArgs.Error(0)
}

// method EnrollStart

func (v *MockInterfaceBiometricsDriver) GoEnrollStart(flags dbus.Flags, ch chan *dbus.Call, chara string, type0 int32, action string) *dbus.Call {
	mockArgs := v.Called(flags, ch, chara, type0, action)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBiometricsDriver) EnrollStart(flags dbus.Flags, chara string, type0 int32, action string) (dbus.UnixFD, error) {
	mockArgs := v.Called(flags, chara, type0, action)

	ret0, ok := mockArgs.Get(0).(dbus.UnixFD)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method EnrollStop

func (v *MockInterfaceBiometricsDriver) GoEnrollStop(flags dbus.Flags, ch chan *dbus.Call, action string) *dbus.Call {
	mockArgs := v.Called(flags, ch, action)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBiometricsDriver) EnrollStop(flags dbus.Flags, action string) error {
	mockArgs := v.Called(flags, action)

	return mockArgs.Error(0)
}

// method VerifyStart

func (v *MockInterfaceBiometricsDriver) GoVerifyStart(flags dbus.Flags, ch chan *dbus.Call, charas []string, action string) *dbus.Call {
	mockArgs := v.Called(flags, ch, charas, action)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBiometricsDriver) VerifyStart(flags dbus.Flags, charas []string, action string) (dbus.UnixFD, error) {
	mockArgs := v.Called(flags, charas, action)

	ret0, ok := mockArgs.Get(0).(dbus.UnixFD)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method VerifyStop

func (v *MockInterfaceBiometricsDriver) GoVerifyStop(flags dbus.Flags, ch chan *dbus.Call, action string) *dbus.Call {
	mockArgs := v.Called(flags, ch, action)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBiometricsDriver) VerifyStop(flags dbus.Flags, action string) error {
	mockArgs := v.Called(flags, action)

	return mockArgs.Error(0)
}

// signal VerifyStatus

func (v *MockInterfaceBiometricsDriver) ConnectVerifyStatus(cb func(action string, verifyStatusCode int32, message string)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// signal EnrollStatus

func (v *MockInterfaceBiometricsDriver) ConnectEnrollStatus(cb func(action string, enrollStatusCode int32, message string)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// property List as

func (v *MockInterfaceBiometricsDriver) List() proxy.PropStringArray {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropStringArray)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

// property CharaType i

func (v *MockInterfaceBiometricsDriver) CharaType() proxy.PropInt32 {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropInt32)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

// property Claim b

func (v *MockInterfaceBiometricsDriver) Claim() proxy.PropBool {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropBool)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}
