// Code generated by "./generator ./session/org.deepin.dde.controlcenter1"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package controlcenter1

import (
	"unsafe"

	"github.com/godbus/dbus/v5"
	"github.com/linuxdeepin/go-lib/dbusutil/proxy"
)

type ControlCenter interface {
	controlCenter // interface org.deepin.dde.ControlCenter1
	proxy.Object
}

type objectControlCenter struct {
	interfaceControlCenter // interface org.deepin.dde.ControlCenter1
	proxy.ImplObject
}

func NewControlCenter(conn *dbus.Conn) ControlCenter {
	obj := new(objectControlCenter)
	obj.ImplObject.Init_(conn, "org.deepin.dde.ControlCenter1", "/org/deepin/dde/ControlCenter1")
	return obj
}

type controlCenter interface {
	GoExit(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call
	Exit(flags dbus.Flags) error
	GoHide(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call
	Hide(flags dbus.Flags) error
	GoShow(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call
	Show(flags dbus.Flags) error
	GoShowHome(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call
	ShowHome(flags dbus.Flags) error
	GoToggle(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call
	Toggle(flags dbus.Flags) error
	GoGetAllModule(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call
	GetAllModule(flags dbus.Flags) (string, error)
	GoShowPage(flags dbus.Flags, ch chan *dbus.Call, module string, page string) *dbus.Call
	ShowPage(flags dbus.Flags, module string, page string) error
	GoShowModule(flags dbus.Flags, ch chan *dbus.Call, module string) *dbus.Call
	ShowModule(flags dbus.Flags, module string) error
	Page() proxy.PropString
	Path() proxy.PropString
}

type interfaceControlCenter struct{}

func (v *interfaceControlCenter) GetObject_() *proxy.ImplObject {
	return (*proxy.ImplObject)(unsafe.Pointer(v))
}

func (*interfaceControlCenter) GetInterfaceName_() string {
	return "org.deepin.dde.ControlCenter1"
}

// method Exit

func (v *interfaceControlCenter) GoExit(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".Exit", flags, ch)
}

func (v *interfaceControlCenter) Exit(flags dbus.Flags) error {
	return (<-v.GoExit(flags, make(chan *dbus.Call, 1)).Done).Err
}

// method Hide

func (v *interfaceControlCenter) GoHide(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".Hide", flags, ch)
}

func (v *interfaceControlCenter) Hide(flags dbus.Flags) error {
	return (<-v.GoHide(flags, make(chan *dbus.Call, 1)).Done).Err
}

// method Show

func (v *interfaceControlCenter) GoShow(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".Show", flags, ch)
}

func (v *interfaceControlCenter) Show(flags dbus.Flags) error {
	return (<-v.GoShow(flags, make(chan *dbus.Call, 1)).Done).Err
}

// method ShowHome

func (v *interfaceControlCenter) GoShowHome(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".ShowHome", flags, ch)
}

func (v *interfaceControlCenter) ShowHome(flags dbus.Flags) error {
	return (<-v.GoShowHome(flags, make(chan *dbus.Call, 1)).Done).Err
}

// method Toggle

func (v *interfaceControlCenter) GoToggle(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".Toggle", flags, ch)
}

func (v *interfaceControlCenter) Toggle(flags dbus.Flags) error {
	return (<-v.GoToggle(flags, make(chan *dbus.Call, 1)).Done).Err
}

// method GetAllModule

func (v *interfaceControlCenter) GoGetAllModule(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".GetAllModule", flags, ch)
}

func (*interfaceControlCenter) StoreGetAllModule(call *dbus.Call) (arg0 string, err error) {
	err = call.Store(&arg0)
	return
}

func (v *interfaceControlCenter) GetAllModule(flags dbus.Flags) (string, error) {
	return v.StoreGetAllModule(
		<-v.GoGetAllModule(flags, make(chan *dbus.Call, 1)).Done)
}

// method ShowPage

func (v *interfaceControlCenter) GoShowPage(flags dbus.Flags, ch chan *dbus.Call, module string, page string) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".ShowPage", flags, ch, module, page)
}

func (v *interfaceControlCenter) ShowPage(flags dbus.Flags, module string, page string) error {
	return (<-v.GoShowPage(flags, make(chan *dbus.Call, 1), module, page).Done).Err
}

// method ShowModule

func (v *interfaceControlCenter) GoShowModule(flags dbus.Flags, ch chan *dbus.Call, module string) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".ShowModule", flags, ch, module)
}

func (v *interfaceControlCenter) ShowModule(flags dbus.Flags, module string) error {
	return (<-v.GoShowModule(flags, make(chan *dbus.Call, 1), module).Done).Err
}

// property Page s

func (v *interfaceControlCenter) Page() proxy.PropString {
	return &proxy.ImplPropString{
		Impl: v,
		Name: "Page",
	}
}

// property Path s

func (v *interfaceControlCenter) Path() proxy.PropString {
	return &proxy.ImplPropString{
		Impl: v,
		Name: "Path",
	}
}
