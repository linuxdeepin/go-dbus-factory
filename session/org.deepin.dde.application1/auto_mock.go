// Code generated by "./generator ./session/org.deepin.dde.application1"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package application1

import (
	"fmt"

	"github.com/godbus/dbus/v5"
	"github.com/linuxdeepin/go-lib/dbusutil"
	"github.com/linuxdeepin/go-lib/dbusutil/proxy"
	"github.com/stretchr/testify/mock"
)

type MockApplication struct {
	MockInterfaceApplication // interface org.deepin.dde.Application1
	proxy.MockObject
}

type MockInterfaceApplication struct {
	mock.Mock
}

// method Name

func (v *MockInterfaceApplication) GoName(flags dbus.Flags, ch chan *dbus.Call, locale string) *dbus.Call {
	mockArgs := v.Called(flags, ch, locale)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceApplication) Name(flags dbus.Flags, locale string) (string, error) {
	mockArgs := v.Called(flags, locale)

	return mockArgs.String(0), mockArgs.Error(1)
}

// method Comment

func (v *MockInterfaceApplication) GoComment(flags dbus.Flags, ch chan *dbus.Call, comment string) *dbus.Call {
	mockArgs := v.Called(flags, ch, comment)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceApplication) Comment(flags dbus.Flags, comment string) (string, error) {
	mockArgs := v.Called(flags, comment)

	return mockArgs.String(0), mockArgs.Error(1)
}

// property categories as

func (v *MockInterfaceApplication) Categories() proxy.PropStringArray {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropStringArray)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

// property mimetypes as

func (v *MockInterfaceApplication) Mimetypes() proxy.PropStringArray {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropStringArray)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

// property id s

func (v *MockInterfaceApplication) Id() proxy.PropString {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropString)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

// property icon s

func (v *MockInterfaceApplication) Icon() proxy.PropString {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropString)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

// property instances ao

func (v *MockInterfaceApplication) Instances() proxy.PropObjectPathArray {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropObjectPathArray)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}

type MockManager struct {
	MockInterfaceManager // interface org.deepin.dde.Application1.Manager
	proxy.MockObject
}

type MockInterfaceManager struct {
	mock.Mock
}

// method AddAutostart

func (v *MockInterfaceManager) GoAddAutostart(flags dbus.Flags, ch chan *dbus.Call, fileNamae string) *dbus.Call {
	mockArgs := v.Called(flags, ch, fileNamae)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) AddAutostart(flags dbus.Flags, fileNamae string) (bool, error) {
	mockArgs := v.Called(flags, fileNamae)

	return mockArgs.Bool(0), mockArgs.Error(1)
}

// method AutostartList

func (v *MockInterfaceManager) GoAutostartList(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) AutostartList(flags dbus.Flags) ([]string, error) {
	mockArgs := v.Called(flags)

	ret0, ok := mockArgs.Get(0).([]string)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method IsAutostart

func (v *MockInterfaceManager) GoIsAutostart(flags dbus.Flags, ch chan *dbus.Call, fileName string) *dbus.Call {
	mockArgs := v.Called(flags, ch, fileName)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) IsAutostart(flags dbus.Flags, fileName string) (bool, error) {
	mockArgs := v.Called(flags, fileName)

	return mockArgs.Bool(0), mockArgs.Error(1)
}

// method RemoveAutostart

func (v *MockInterfaceManager) GoRemoveAutostart(flags dbus.Flags, ch chan *dbus.Call, fileNamae string) *dbus.Call {
	mockArgs := v.Called(flags, ch, fileNamae)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) RemoveAutostart(flags dbus.Flags, fileNamae string) (bool, error) {
	mockArgs := v.Called(flags, fileNamae)

	return mockArgs.Bool(0), mockArgs.Error(1)
}

// method Launch

func (v *MockInterfaceManager) GoLaunch(flags dbus.Flags, ch chan *dbus.Call, desktopFile string) *dbus.Call {
	mockArgs := v.Called(flags, ch, desktopFile)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) Launch(flags dbus.Flags, desktopFile string) error {
	mockArgs := v.Called(flags, desktopFile)

	return mockArgs.Error(0)
}

// method LaunchApp

func (v *MockInterfaceManager) GoLaunchApp(flags dbus.Flags, ch chan *dbus.Call, desktopFile string, timestamp uint32, files []string) *dbus.Call {
	mockArgs := v.Called(flags, ch, desktopFile, timestamp, files)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) LaunchApp(flags dbus.Flags, desktopFile string, timestamp uint32, files []string) error {
	mockArgs := v.Called(flags, desktopFile, timestamp, files)

	return mockArgs.Error(0)
}

// method LaunchAppAction

func (v *MockInterfaceManager) GoLaunchAppAction(flags dbus.Flags, ch chan *dbus.Call, desktopFile string, action string, timestamp uint32) *dbus.Call {
	mockArgs := v.Called(flags, ch, desktopFile, action, timestamp)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) LaunchAppAction(flags dbus.Flags, desktopFile string, action string, timestamp uint32) error {
	mockArgs := v.Called(flags, desktopFile, action, timestamp)

	return mockArgs.Error(0)
}

// method LaunchAppWithOptions

func (v *MockInterfaceManager) GoLaunchAppWithOptions(flags dbus.Flags, ch chan *dbus.Call, desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant) *dbus.Call {
	mockArgs := v.Called(flags, ch, desktopFile, timestamp, files, options)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) LaunchAppWithOptions(flags dbus.Flags, desktopFile string, timestamp uint32, files []string, options map[string]dbus.Variant) error {
	mockArgs := v.Called(flags, desktopFile, timestamp, files, options)

	return mockArgs.Error(0)
}

// method RunCommand

func (v *MockInterfaceManager) GoRunCommand(flags dbus.Flags, ch chan *dbus.Call, exe string, args []string) *dbus.Call {
	mockArgs := v.Called(flags, ch, exe, args)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) RunCommand(flags dbus.Flags, exe string, args []string) error {
	mockArgs := v.Called(flags, exe, args)

	return mockArgs.Error(0)
}

// method RunCommandWithOptions

func (v *MockInterfaceManager) GoRunCommandWithOptions(flags dbus.Flags, ch chan *dbus.Call, exe string, args []string, options map[string]dbus.Variant) *dbus.Call {
	mockArgs := v.Called(flags, ch, exe, args, options)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceManager) RunCommandWithOptions(flags dbus.Flags, exe string, args []string, options map[string]dbus.Variant) error {
	mockArgs := v.Called(flags, exe, args, options)

	return mockArgs.Error(0)
}

// signal AutostartChanged

func (v *MockInterfaceManager) ConnectAutostartChanged(cb func(status string, filePath string)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

type MockInstance struct {
	MockInterfaceInstance // interface org.deepin.dde.Application1.Instance
	proxy.MockObject
}

type MockInterfaceInstance struct {
	mock.Mock
}

// method Exit

func (v *MockInterfaceInstance) GoExit(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceInstance) Exit(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}

// method Kill

func (v *MockInterfaceInstance) GoKill(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceInstance) Kill(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}

// property id o

func (v *MockInterfaceInstance) Id() proxy.PropObjectPath {
	mockArgs := v.Called()

	ret0, ok := mockArgs.Get(0).(*proxy.MockPropObjectPath)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0
}
