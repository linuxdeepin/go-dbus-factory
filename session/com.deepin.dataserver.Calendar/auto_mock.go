// Code generated by "./generator ./session/com.deepin.dataserver.Calendar"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2023 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package Calendar

import (
	"fmt"

	"github.com/godbus/dbus/v5"
	"github.com/linuxdeepin/go-lib/dbusutil/proxy"
	"github.com/stretchr/testify/mock"
)

type MockHuangLi struct {
	MockInterfaceHuangLi // interface com.deepin.dataserver.Calendar.HuangLi
	proxy.MockObject
}

type MockInterfaceHuangLi struct {
	mock.Mock
}

// method getFestivalMonth

func (v *MockInterfaceHuangLi) GoGetFestivalMonth(flags dbus.Flags, ch chan *dbus.Call, arg1 uint32, arg2 uint32) *dbus.Call {
	mockArgs := v.Called(flags, ch, arg1, arg2)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceHuangLi) GetFestivalMonth(flags dbus.Flags, arg1 uint32, arg2 uint32) (string, error) {
	mockArgs := v.Called(flags, arg1, arg2)

	return mockArgs.String(0), mockArgs.Error(1)
}

// method getHuangLiDay

func (v *MockInterfaceHuangLi) GoGetHuangLiDay(flags dbus.Flags, ch chan *dbus.Call, arg1 uint32, arg2 uint32, arg3 uint32) *dbus.Call {
	mockArgs := v.Called(flags, ch, arg1, arg2, arg3)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceHuangLi) GetHuangLiDay(flags dbus.Flags, arg1 uint32, arg2 uint32, arg3 uint32) (string, error) {
	mockArgs := v.Called(flags, arg1, arg2, arg3)

	return mockArgs.String(0), mockArgs.Error(1)
}

// method getHuangLiMonth

func (v *MockInterfaceHuangLi) GoGetHuangLiMonth(flags dbus.Flags, ch chan *dbus.Call, arg1 uint32, arg2 uint32, arg3 bool) *dbus.Call {
	mockArgs := v.Called(flags, ch, arg1, arg2, arg3)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceHuangLi) GetHuangLiMonth(flags dbus.Flags, arg1 uint32, arg2 uint32, arg3 bool) (string, error) {
	mockArgs := v.Called(flags, arg1, arg2, arg3)

	return mockArgs.String(0), mockArgs.Error(1)
}

// method getLunarInfoBySolar

func (v *MockInterfaceHuangLi) GoGetLunarInfoBySolar(flags dbus.Flags, ch chan *dbus.Call, arg1 uint32, arg2 uint32, arg3 uint32) *dbus.Call {
	mockArgs := v.Called(flags, ch, arg1, arg2, arg3)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceHuangLi) GetLunarInfoBySolar(flags dbus.Flags, arg1 uint32, arg2 uint32, arg3 uint32) ([]interface{}, error) {
	mockArgs := v.Called(flags, arg1, arg2, arg3)

	ret0, ok := mockArgs.Get(0).([]interface{})
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method getLunarMonthCalendar

func (v *MockInterfaceHuangLi) GoGetLunarMonthCalendar(flags dbus.Flags, ch chan *dbus.Call, arg1 uint32, arg2 uint32, arg3 bool) *dbus.Call {
	mockArgs := v.Called(flags, ch, arg1, arg2, arg3)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceHuangLi) GetLunarMonthCalendar(flags dbus.Flags, arg1 uint32, arg2 uint32, arg3 bool) ([]interface{}, error) {
	mockArgs := v.Called(flags, arg1, arg2, arg3)

	ret0, ok := mockArgs.Get(0).([]interface{})
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}
