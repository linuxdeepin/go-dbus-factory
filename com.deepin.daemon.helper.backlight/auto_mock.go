// Code generated by "./generator ./com.deepin.daemon.helper.backlight"; DO NOT EDIT.

// SPDX-FileCopyrightText: 2018 - 2022 UnionTech Software Technology Co., Ltd.
//
// SPDX-License-Identifier: GPL-3.0-or-later
package backlight

import "fmt"
import "github.com/godbus/dbus"

import "github.com/linuxdeepin/go-lib/dbusutil/proxy"
import "github.com/stretchr/testify/mock"

type MockBacklight struct {
	MockInterfaceBacklight // interface com.deepin.daemon.helper.Backlight
	proxy.MockObject
}

type MockInterfaceBacklight struct {
	mock.Mock
}

// method SetBrightness

func (v *MockInterfaceBacklight) GoSetBrightness(flags dbus.Flags, ch chan *dbus.Call, type0 uint8, name string, value int32) *dbus.Call {
	mockArgs := v.Called(flags, ch, type0, name, value)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBacklight) SetBrightness(flags dbus.Flags, type0 uint8, name string, value int32) error {
	mockArgs := v.Called(flags, type0, name, value)

	return mockArgs.Error(0)
}

// method CheckCfgSupport

func (v *MockInterfaceBacklight) GoCheckCfgSupport(flags dbus.Flags, ch chan *dbus.Call, name string) *dbus.Call {
	mockArgs := v.Called(flags, ch, name)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceBacklight) CheckCfgSupport(flags dbus.Flags, name string) (bool, error) {
	mockArgs := v.Called(flags, name)

	return mockArgs.Bool(0), mockArgs.Error(1)
}

type MockDDCCI struct {
	MockInterfaceDdcci // interface com.deepin.daemon.helper.Backlight.DDCCI
	proxy.MockObject
}

type MockInterfaceDdcci struct {
	mock.Mock
}

// method CheckSupport

func (v *MockInterfaceDdcci) GoCheckSupport(flags dbus.Flags, ch chan *dbus.Call, edidChecksum string) *dbus.Call {
	mockArgs := v.Called(flags, ch, edidChecksum)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceDdcci) CheckSupport(flags dbus.Flags, edidChecksum string) (bool, error) {
	mockArgs := v.Called(flags, edidChecksum)

	return mockArgs.Bool(0), mockArgs.Error(1)
}

// method GetBrightness

func (v *MockInterfaceDdcci) GoGetBrightness(flags dbus.Flags, ch chan *dbus.Call, edidChecksum string) *dbus.Call {
	mockArgs := v.Called(flags, ch, edidChecksum)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceDdcci) GetBrightness(flags dbus.Flags, edidChecksum string) (int32, error) {
	mockArgs := v.Called(flags, edidChecksum)

	ret0, ok := mockArgs.Get(0).(int32)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method SetBrightness

func (v *MockInterfaceDdcci) GoSetBrightness(flags dbus.Flags, ch chan *dbus.Call, edidChecksum string, value int32) *dbus.Call {
	mockArgs := v.Called(flags, ch, edidChecksum, value)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceDdcci) SetBrightness(flags dbus.Flags, edidChecksum string, value int32) error {
	mockArgs := v.Called(flags, edidChecksum, value)

	return mockArgs.Error(0)
}

// method RefreshDisplays

func (v *MockInterfaceDdcci) GoRefreshDisplays(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceDdcci) RefreshDisplays(flags dbus.Flags) error {
	mockArgs := v.Called(flags)

	return mockArgs.Error(0)
}
